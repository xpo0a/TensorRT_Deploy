2022-08-11 09:47:06,049 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.1
	PyTorch: 1.8.1+cu111
	TorchVision: 0.9.1+cu111
2022-08-11 09:47:06,049 INFO: 
  name: debug_finetune_RealESRGANx4plus_400k
  model_type: RealESRGANModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  l1_gt_usm: True
  percep_gt_usm: True
  gan_gt_usm: False
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 180
  datasets:[
    train:[
      name: DF2K+OST
      type: RealESRGANDataset
      dataroot_gt: /media/ubuntu/HDD/LRQ_data/DF2K_lmdb_sub/DF2K_train_HR_sub.lmdb
      meta_info: /media/ubuntu/HDD/LRQ_data/DF2K_lmdb_sub/DF2K_train_HR_sub.lmdb/meta_info.txt
      io_backend:[
        type: lmdb
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 1
      batch_size_per_gpu: 1
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  network_d:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
    skip_connection: True
  ]
  path:[
    pretrain_network_g: /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/pretrained_models/RealESRGAN_x4plus.pth
    param_key_g: params_ema
    strict_load_g: True
    pretrain_network_d: /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/pretrained_models/RealESRGAN_x4plus_netD.pth
    param_key_d: params
    strict_load_d: True
    resume_state: None
    experiments_root: /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/debug_finetune_RealESRGANx4plus_400k
    models: /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/debug_finetune_RealESRGANx4plus_400k/models
    training_states: /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/debug_finetune_RealESRGANx4plus_400k/training_states
    log: /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/debug_finetune_RealESRGANx4plus_400k
    visualization: /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/debug_finetune_RealESRGANx4plus_400k/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    optim_d:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [400000]
      gamma: 0.5
    ]
    total_iter: 400000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    perceptual_opt:[
      type: PerceptualLoss
      layer_weights:[
        conv1_2: 0.1
        conv2_2: 0.1
        conv3_4: 1
        conv4_4: 1
        conv5_4: 1
      ]
      vgg_type: vgg19
      use_input_norm: True
      perceptual_weight: 1.0
      style_weight: 0
      range_norm: False
      criterion: l1
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 0.1
    ]
    net_d_iters: 1
    net_d_init_iters: 0
    val:[
      val_freq: 5000.0
      save_img: True
      metrics:[
        psnr:[
          type: calculate_psnr
          crop_border: 4
          test_y_channel: False
        ]
      ]
    ]
  ]
  logger:[
    print_freq: 1
    save_checkpoint_freq: 8
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: True
  root_path: /home/ubuntu/Music/Real-ESRGAN-QAT_TRT

2022-08-11 09:47:06,061 INFO: Dataset [RealESRGANDataset] - DF2K+OST is built.
2022-08-11 09:47:06,062 INFO: Training statistics:
	Number of train images: 47680
	Dataset enlarge ratio: 1
	Batch size per gpu: 1
	World size (gpu number): 1
	Require iter number per epoch: 47680
	Total epochs: 9; iters: 400000.
2022-08-11 09:47:06,505 INFO: Network [RRDBNet] is created.
2022-08-11 09:47:08,858 INFO: Network: RRDBNet, with parameters: 16,697,987
2022-08-11 09:47:08,858 INFO: RRDBNet(
  (conv_first): QuantConv2d(
    3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): QuantConv2d(
          64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv2): QuantConv2d(
          96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv3): QuantConv2d(
          128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv4): QuantConv2d(
          160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (conv5): QuantConv2d(
          192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
          (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
          (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
        )
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): QuantConv2d(
    64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv_up1): QuantConv2d(
    64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv_up2): QuantConv2d(
    64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv_hr): QuantConv2d(
    64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv_last): QuantConv2d(
    64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2022-08-11 09:47:08,938 INFO: Loading RRDBNet model from /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/pretrained_models/RealESRGAN_x4plus.pth, with param key: [params_ema].
2022-08-11 09:47:09,074 INFO: Use Exponential Moving Average with decay: 0.999
2022-08-11 09:47:09,421 INFO: Network [RRDBNet] is created.
2022-08-11 09:47:09,481 INFO: Loading RRDBNet model from /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/pretrained_models/RealESRGAN_x4plus.pth, with param key: [params_ema].
2022-08-11 09:47:09,635 INFO: Network [UNetDiscriminatorSN] is created.
2022-08-11 09:47:09,645 INFO: Network: UNetDiscriminatorSN, with parameters: 4,376,897
2022-08-11 09:47:09,645 INFO: UNetDiscriminatorSN(
  (conv0): QuantConv2d(
    3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv1): QuantConv2d(
    64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv2): QuantConv2d(
    128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv3): QuantConv2d(
    256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv4): QuantConv2d(
    512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv5): QuantConv2d(
    256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv6): QuantConv2d(
    128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv7): QuantConv2d(
    64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv8): QuantConv2d(
    64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
  (conv9): QuantConv2d(
    64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
    (_input_quantizer): TensorQuantizer(8bit fake per-tensor amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
    (_weight_quantizer): TensorQuantizer(8bit fake axis=0 amax=dynamic calibrator=MaxCalibrator scale=1.0 quant)
  )
)
2022-08-11 09:47:09,651 INFO: Loading UNetDiscriminatorSN model from /home/ubuntu/Music/Real-ESRGAN-QAT_TRT/experiments/pretrained_models/RealESRGAN_x4plus_netD.pth, with param key: [params].
2022-08-11 09:47:09,664 INFO: Loss [L1Loss] is created.
2022-08-11 09:47:10,627 INFO: Loss [PerceptualLoss] is created.
2022-08-11 09:47:10,640 INFO: Loss [GANLoss] is created.
2022-08-11 09:47:10,659 INFO: Model [RealESRGANModel] is created.
2022-08-11 09:47:10,694 INFO: Start training from epoch: 0, iter: 0
2022-08-11 09:47:14,913 INFO: [debug..][epoch:  0, iter:       1, lr:(1.000e-04,)] [eta: 0:00:17, time (data): 4.219 (0.133)] l_g_pix: 4.0933e-02 l_g_percep: 9.6835e+00 l_g_gan: 2.4853e-01 l_d_real: 8.8832e-01 out_d_real: 5.2612e-01 l_d_fake: 2.3701e-01 out_d_fake: -2.2489e+00 
2022-08-11 09:47:15,542 INFO: [debug..][epoch:  0, iter:       2, lr:(1.000e-04,)] [eta: 23:19:24, time (data): 2.424 (0.067)] l_g_pix: 4.5023e-02 l_g_percep: 7.6026e+00 l_g_gan: 1.3533e-01 l_d_real: 1.8040e-01 out_d_real: 2.4848e+00 l_d_fake: 6.3438e-01 out_d_fake: -7.1766e-01 
2022-08-11 09:47:16,085 INFO: [debug..][epoch:  0, iter:       3, lr:(1.000e-04,)] [eta: 1 day, 8:34:33, time (data): 1.797 (0.046)] l_g_pix: 1.0927e-01 l_g_percep: 1.5139e+01 l_g_gan: 1.1062e-01 l_d_real: 1.9593e-01 out_d_real: 3.3988e+00 l_d_fake: 9.7552e-01 out_d_fake: -1.2802e-01 
2022-08-11 09:47:16,620 INFO: [debug..][epoch:  0, iter:       4, lr:(1.000e-04,)] [eta: 1 day, 13:56:54, time (data): 1.481 (0.035)] l_g_pix: 6.6596e-02 l_g_percep: 1.2832e+01 l_g_gan: 1.9261e-01 l_d_real: 4.6087e-01 out_d_real: 1.6358e+00 l_d_fake: 3.6465e-01 out_d_fake: -1.5626e+00 
2022-08-11 09:47:17,260 INFO: [debug..][epoch:  0, iter:       5, lr:(1.000e-04,)] [eta: 1 day, 19:28:15, time (data): 1.313 (0.028)] l_g_pix: 6.5292e-02 l_g_percep: 8.3196e+00 l_g_gan: 2.1521e-01 l_d_real: 3.1081e-01 out_d_real: 1.9100e+00 l_d_fake: 2.4618e-01 out_d_fake: -1.9051e+00 
2022-08-11 09:47:17,864 INFO: [debug..][epoch:  0, iter:       6, lr:(1.000e-04,)] [eta: 1 day, 22:50:51, time (data): 1.195 (0.024)] l_g_pix: 8.0621e-02 l_g_percep: 1.5949e+01 l_g_gan: 1.8849e-01 l_d_real: 1.4197e-01 out_d_real: 4.1188e+00 l_d_fake: 3.7520e-01 out_d_fake: -1.5090e+00 
2022-08-11 09:47:18,459 INFO: [debug..][epoch:  0, iter:       7, lr:(1.000e-04,)] [eta: 2 days, 1:15:37, time (data): 1.109 (0.020)] l_g_pix: 8.7427e-02 l_g_percep: 1.8203e+01 l_g_gan: 2.7606e-01 l_d_real: 4.9586e-01 out_d_real: 2.0603e+00 l_d_fake: 2.2171e-01 out_d_fake: -2.5396e+00 
2022-08-11 09:47:19,020 INFO: [debug..][epoch:  0, iter:       8, lr:(1.000e-04,)] [eta: 2 days, 2:42:14, time (data): 1.040 (0.018)] l_g_pix: 8.1275e-02 l_g_percep: 1.9187e+01 l_g_gan: 2.7392e-01 l_d_real: 6.4472e-01 out_d_real: 3.6810e+00 l_d_fake: 2.3793e-01 out_d_fake: -2.4998e+00 
2022-08-11 09:47:19,020 INFO: Saving models and training states.
2022-08-11 09:48:38,930 INFO: [debug..][epoch:  0, iter:       9, lr:(1.000e-04,)] [eta: 38 days, 21:30:09, time (data): 1.019 (0.017)] l_g_pix: 4.0567e-02 l_g_percep: 1.0590e+01 l_g_gan: 2.0147e-01 l_d_real: 2.4812e-01 out_d_real: 2.6516e+00 l_d_fake: 4.3836e-01 out_d_fake: -1.5757e+00 
2022-08-11 09:48:39,297 INFO: [debug..][epoch:  0, iter:      10, lr:(1.000e-04,)] [eta: 35 days, 12:20:36, time (data): 0.954 (0.015)] l_g_pix: 4.4688e-02 l_g_percep: 1.3159e+01 l_g_gan: 3.2774e-01 l_d_real: 5.2586e-01 out_d_real: 1.4767e+00 l_d_fake: 1.1165e-01 out_d_fake: -3.1664e+00 
2022-08-11 09:48:39,706 INFO: [debug..][epoch:  0, iter:      11, lr:(1.000e-04,)] [eta: 32 days, 17:06:11, time (data): 0.904 (0.014)] l_g_pix: 1.1550e-01 l_g_percep: 1.8655e+01 l_g_gan: 1.8939e-01 l_d_real: 1.4761e-01 out_d_real: 8.4750e+00 l_d_fake: 8.7171e-01 out_d_fake: -1.0211e+00 
2022-08-11 09:48:40,196 INFO: [debug..][epoch:  0, iter:      12, lr:(1.000e-04,)] [eta: 30 days, 8:53:38, time (data): 0.869 (0.013)] l_g_pix: 8.5922e-02 l_g_percep: 1.6329e+01 l_g_gan: 1.0883e-01 l_d_real: 1.4243e-01 out_d_real: 7.0080e+00 l_d_fake: 1.8318e+00 out_d_fake: 7.4365e-01 
2022-08-11 09:48:40,607 INFO: [debug..][epoch:  0, iter:      13, lr:(1.000e-04,)] [eta: 28 days, 8:05:25, time (data): 0.834 (0.012)] l_g_pix: 1.3903e-01 l_g_percep: 1.3414e+01 l_g_gan: 2.9995e-01 l_d_real: 7.7117e-02 out_d_real: 4.9789e+00 l_d_fake: 1.9170e-01 out_d_fake: -2.8076e+00 
2022-08-11 09:48:41,091 INFO: [debug..][epoch:  0, iter:      14, lr:(1.000e-04,)] [eta: 26 days, 14:20:00, time (data): 0.809 (0.011)] l_g_pix: 8.2362e-02 l_g_percep: 1.3727e+01 l_g_gan: 3.6517e-01 l_d_real: 5.3261e-01 out_d_real: 3.3620e+00 l_d_fake: 8.9350e-02 out_d_fake: -3.5611e+00 
2022-08-11 09:48:41,477 INFO: [debug..][epoch:  0, iter:      15, lr:(1.000e-04,)] [eta: 25 days, 1:07:07, time (data): 0.781 (0.011)] l_g_pix: 6.0325e-02 l_g_percep: 1.5272e+01 l_g_gan: 3.1951e-01 l_d_real: 8.3028e-01 out_d_real: 1.5032e+00 l_d_fake: 1.4903e-01 out_d_fake: -3.0455e+00 
2022-08-11 09:48:41,902 INFO: [debug..][epoch:  0, iter:      16, lr:(1.000e-04,)] [eta: 23 days, 16:32:11, time (data): 0.759 (0.010)] l_g_pix: 2.0874e-02 l_g_percep: 3.3413e+00 l_g_gan: 4.7978e-01 l_d_real: 3.0837e+00 out_d_real: -3.0124e+00 l_d_fake: 1.3729e-02 out_d_fake: -4.7824e+00 
2022-08-11 09:48:41,903 INFO: Saving models and training states.
2022-08-11 09:50:05,014 INFO: [debug..][epoch:  0, iter:      17, lr:(1.000e-04,)] [eta: 43 days, 17:57:34, time (data): 0.763 (0.010)] l_g_pix: 2.9046e-02 l_g_percep: 7.9020e+00 l_g_gan: 3.5025e-01 l_d_real: 2.3024e+00 out_d_real: -1.8182e+00 l_d_fake: 5.1827e-02 out_d_fake: -3.4503e+00 
2022-08-11 09:50:05,356 INFO: [debug..][epoch:  0, iter:      18, lr:(1.000e-04,)] [eta: 41 days, 12:41:55, time (data): 0.739 (0.009)] l_g_pix: 2.8905e-02 l_g_percep: 7.1073e+00 l_g_gan: 2.3062e-01 l_d_real: 2.1310e-01 out_d_real: 2.5592e+00 l_d_fake: 1.6624e-01 out_d_fake: -2.1405e+00 
2022-08-11 09:50:05,769 INFO: [debug..][epoch:  0, iter:      19, lr:(1.000e-04,)] [eta: 39 days, 13:09:19, time (data): 0.722 (0.009)] l_g_pix: 7.9908e-02 l_g_percep: 1.6718e+01 l_g_gan: 2.2835e-01 l_d_real: 9.5681e-02 out_d_real: 5.2299e+00 l_d_fake: 3.5164e-01 out_d_fake: -1.9314e+00 
2022-08-11 09:50:06,118 INFO: [debug..][epoch:  0, iter:      20, lr:(1.000e-04,)] [eta: 37 days, 17:47:57, time (data): 0.704 (0.009)] l_g_pix: 1.5542e-01 l_g_percep: 2.7931e+01 l_g_gan: 1.8710e-01 l_d_real: 3.2484e-03 out_d_real: 1.1354e+01 l_d_fake: 4.5017e-01 out_d_fake: -1.4224e+00 
2022-08-11 09:50:06,521 INFO: [debug..][epoch:  0, iter:      21, lr:(1.000e-04,)] [eta: 36 days, 2:39:49, time (data): 0.689 (0.008)] l_g_pix: 9.0255e-02 l_g_percep: 1.8129e+01 l_g_gan: 2.3670e-01 l_d_real: 3.3753e-01 out_d_real: 4.6943e+00 l_d_fake: 3.3803e-01 out_d_fake: -2.0291e+00 
2022-08-11 09:50:06,944 INFO: [debug..][epoch:  0, iter:      22, lr:(1.000e-04,)] [eta: 34 days, 15:01:25, time (data): 0.677 (0.008)] l_g_pix: 1.4334e-01 l_g_percep: 2.6302e+01 l_g_gan: 2.2110e-01 l_d_real: 4.1690e-02 out_d_real: 4.5420e+00 l_d_fake: 2.7146e-01 out_d_fake: -1.9395e+00 
2022-08-11 09:50:07,352 INFO: [debug..][epoch:  0, iter:      23, lr:(1.000e-04,)] [eta: 33 days, 6:16:48, time (data): 0.665 (0.008)] l_g_pix: 4.5772e-02 l_g_percep: 9.7655e+00 l_g_gan: 2.4288e-01 l_d_real: 3.9037e-01 out_d_real: 2.2275e+00 l_d_fake: 2.1153e-01 out_d_fake: -2.2154e+00 
2022-08-11 09:50:07,764 INFO: [debug..][epoch:  0, iter:      24, lr:(1.000e-04,)] [eta: 32 days, 0:10:43, time (data): 0.655 (0.008)] l_g_pix: 8.1959e-02 l_g_percep: 1.2610e+01 l_g_gan: 2.1731e-01 l_d_real: 7.3805e-01 out_d_real: 9.0018e-01 l_d_fake: 3.7742e-01 out_d_fake: -1.7950e+00 
2022-08-11 09:50:07,764 INFO: Saving models and training states.
